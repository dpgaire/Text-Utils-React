{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","textBtn","console","log","className","mode","href","title","type","id","homeText","role","onClick","toggle","htmlFor","gradinatMode","toggleGradiant","defaultProps","aboutText","TextForm","useState","text","setText","style","color","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","setGradinatMode","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.79619b55.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import {Link} from 'react-router-dom'\nfunction NavBar(props,{textBtn}) {\n    console.log(textBtn);\n    return (\n        <>\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container\">\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                <li className=\"nav-item\">\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.homeText}</a>\n                    {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.homeText}</Link> */}\n                </li>\n                {/* <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                </li> */}\n                </ul>\n                <div className={`form-check form-switch text-${props.mode==='white'?'dark':'white'}`}>\n                    <input className=\"form-check-input\"\n                    type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggle}/>\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n                </div>\n                <div className={`form-check form-switch text-${props.gradinatMode==='green'?'yellow':'green'} mx-3`}>\n                    <input className=\"form-check-input\"\n                    type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleGradiant}/>\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Gradiant Mode</label>\n                </div>\n            </div>\n            </div>\n      </nav>\n    </>\n    )\n}\nNavBar.propTypes={\n        title:PropTypes.string.isRequired,\n        aboutText:PropTypes.string.isRequired,\n        homeText: PropTypes.string.isRequired,\n}\nNavBar.defaultProps={\n    title:'TextUtils',\n    aboutText:'About',\n    homeText:'Home'\n}\nexport default NavBar\n","import React,{useState}from 'react'\n\nfunction TextForm(props) {\n    const handleUpEvent=()=>{\n        // console.log(\"Button is triggered!\" +text);\n        let newText=text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Text converted to uppercase\",\"success\")\n    }\n     const handleLcEvent=()=>{\n        // console.log(\"Button is triggered!\" +text);\n        let newText=text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Text converted to lowercase\",\"success\")\n    }\n    const hanndleOnChange=(event)=>{\n        // console.log(\"onChange\");\n        setText(event.target.value);\n    }\n    const handleUpEventReset=()=>{\n        setText(\"\");\n    }\n    const handleCopyText=()=>{\n        var text=document.getElementById('exampleFormControlTextarea1');\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Text copy to clipboard\",\"success\")\n    }\n    const removeExtraText=()=>{\n        let newText=text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Removing extra spaces\",\"success\")\n    }\n    \n    const[text,setText]=useState(\"Enter the value\");\n    // text=\"Updated text\"; //Wrong way to update the state value.\n    // setText(\"Updated text to be use\");//Right way to use state.\n    return (\n        <div className=\"container\" style={{color:props.mode==='white'?'black':'white'}}> \n                <div className=\"mb-3\">\n                    <h4>{props.title}</h4>\n                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"8\" value={text} onChange={hanndleOnChange} style={{backgroundColor:props.mode==='white'?'white':'black',color:props.mode==='white'?'black':'white'}}></textarea>\n                    <button className=\"btn btn-primary my-2\" style={{backgroundColor:props.mode==='white'?'white':'black',color:props.mode==='white'?'black':'white'}} onClick={handleUpEvent}>Convert To Uppercase</button>\n                    <button className=\"btn btn-primary mx-2\" onClick={handleLcEvent} style={{backgroundColor:props.mode==='white'?'white':'black',color:props.mode==='white'?'black':'white'}}>Convert To Lowercase</button>\n                    <button className=\"btn btn-primary mx-2\" onClick={handleCopyText} style={{backgroundColor:props.mode==='white'?'white':'black',color:props.mode==='white'?'black':'white'}}>Copy Text</button>\n                     <button className=\"btn btn-primary mx-2\" onClick={removeExtraText}   style={{backgroundColor:props.mode==='white'?'white':'black',color:props.mode==='white'?'black':'white'}}>Remove Extra spaces</button>\n                    <button className=\"btn btn-danger mx-2\" onClick={handleUpEventReset} style={{backgroundColor:props.mode==='white'?'white':'black',color:props.mode==='white'?'black':'white'}}>Reset</button>\n\n                </div>\n                <div className=\"container\">\n                    <h1>Your text summary</h1>\n                    <p>{text.split(' ').length} words and {text.length} characters</p>\n                    <p>{0.008*text.split(\" \").length} minutes to read</p>\n                    <h2>Preview the text</h2>\n                    <p>{text.length>0?text:\"Noting to preview!\"}</p>\n                </div>\n        </div>\n    )\n}\n\nexport default TextForm\n","import React from 'react'\n\nfunction Alert(props) {\n\n    const capitalize=(word)=>{\n        const lower=word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className=\"container my-3\">\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}{\"!\"}{\" \"}</strong>{props.alert.msg}\n            </div>\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport NavBar from './components/NavBar'\nimport TextForm from './components/TextForm'\n// import About from './components/About'\nimport React, { useState } from 'react'\nimport Alert from './components/Alert'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n \n// } from 'react-router-dom'\n\n\nfunction App() {\n  const [mode,setMode]=useState('white')\n  const [alert,setAlert]=useState(null)\n  const [gradinatMode,setGradinatMode]=useState('green');\n\n  const gradiantMode=()=>{\n    if(gradinatMode==='green')\n    {\n       setGradinatMode('yellow')\n       document.body.style.backgroundColor='yellow';\n       showAlert(\"Gradiant mode enabled\",\"success\")\n      \n    }\n    else{\n       setGradinatMode('green')\n       document.body.style.backgroundColor='green';\n      showAlert(\"Normal gradiant mode enabled\",\"success\")\n    }\n  }\n  \n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    },1500)\n  }\n\n  const toggleMode=()=>{\n    if(mode==='white')\n    {\n       setMode('dark')\n       document.body.style.backgroundColor='black';\n       showAlert(\"Dark mode enabled\",\"success\");\n       document.title=\"TextUtils - Dark Mode\";\n      \n    }\n    else{\n       setMode('white')\n       document.body.style.backgroundColor='white';\n      showAlert(\"Light mode enabled\",\"success\")\n      // setTimeout(() => {\n      //   document.title=\"TextUtils - Light Delay Mode\";\n      // },2000)\n      // setTimeout(() => {\n      //   document.title=\"TextUtils - Light Mode\";\n      // },4000)\n      document.title=\"TextUtils - Light Mode\";\n    }\n  }\n  \n  return (\n    <>\n    {/* <Router> */}\n      <NavBar \n      title=\"PropsTitle\" \n      mode={mode}\n      toggle={toggleMode}\n      toggleGradiant={gradiantMode}\n      />\n      <Alert alert={alert}/>\n      \n      {/* <About/> */}\n      {/* <Switch>\n        <Route exact path=\"/about\">\n          <About/>\n        </Route>\n        <Route exact path=\"/\"> */}\n          <TextForm\n            mode={mode}\n            showAlert={showAlert}\n            title=\"Enter the text to analyze\"\n          />\n        {/* </Route>\n      </Switch>\n      </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}