{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","textBtn","className","mode","to","title","type","id","homeText","aboutText","role","onClick","toggle","htmlFor","defaultProps","TextForm","useState","text","setText","style","color","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","disabled","length","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","About","myStyle","border","borderColor","class","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","gradinatMode","setGradinatMode","message","setTimeout","body","toggleGradiant","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8e20ad5b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'react-router-dom'\nfunction NavBar(props,{textBtn}) {\n    return (\n        <>\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container\">\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                {/* <a className=\"navbar-brand\" href=\"/\">{props.title}</a> */}\n                <button className=\"navbar-toggler \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon \"></span>\n                </button>\n            <div className=\"collapse navbar-collapse \" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                <li className=\"nav-item\">\n                    {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.homeText}</a> */}\n                    <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.homeText}</Link>\n                </li>\n                <li className=\"nav-item\">\n                    {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                </li>\n                </ul>\n                <div className={`form-check form-switch text-${props.mode==='white'?'dark':'white'}`}>\n                    <input className=\"form-check-input\"\n                    type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggle}/>\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n                </div>\n                {/* <div className={`form-check form-switch text-${props.gradinatMode==='green'?'yellow':'green'} mx-3`}>\n                    <input className=\"form-check-input\"\n                    type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleGradiant}/>\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Gradiant Mode</label>\n                </div> */}\n            </div>\n            </div>\n      </nav>\n    </>\n    )\n}\nNavBar.propTypes={\n        title:PropTypes.string.isRequired,\n        aboutText:PropTypes.string.isRequired,\n        homeText: PropTypes.string.isRequired,\n}\nNavBar.defaultProps={\n    title:'TextUtils',\n    aboutText:'About',\n    homeText:'Home'\n}\nexport default NavBar\n","import React,{useState}from 'react'\n\nfunction TextForm(props) {\n    const handleUpEvent=()=>{\n        // console.log(\"Button is triggered!\" +text);\n        let newText=text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Text converted to uppercase\",\"success\")\n    }\n     const handleLcEvent=()=>{\n        // console.log(\"Button is triggered!\" +text);\n        let newText=text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Text converted to lowercase\",\"success\")\n    }\n    const hanndleOnChange=(event)=>{\n        // console.log(\"onChange\");\n        setText(event.target.value);\n    }\n    const handleUpEventReset=()=>{\n        setText(\"\");\n    }\n    const handleCopyText=()=>{\n        var text=document.getElementById('exampleFormControlTextarea1');\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Text copy to clipboard\",\"success\");\n        document.getSelection().removeAllRanges();\n    }\n    const removeExtraText=()=>{\n        let newText=text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Removing extra spaces\",\"success\")\n    }\n    \n    const[text,setText]=useState(\"Enter text here...\");\n    // text=\"Updated text\"; //Wrong way to update the state value.\n    // setText(\"Updated text to be use\");//Right way to use state.\n    return (\n        <div className=\"container my-4\" style={{color:props.mode==='white'?'black':'white'}}> \n                <div className=\"mb-5 \">\n                    <h4>{props.title}</h4>\n                    <textarea className=\"form-control my-4\" id=\"exampleFormControlTextarea1\" rows=\"8\" value={text} onChange={hanndleOnChange} style={{backgroundColor:props.mode==='white'?'white':'black',color:props.mode==='white'?'black':'white'}}></textarea>\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleUpEvent} disabled={text.length===0}>Convert To Uppercase</button>\n                    <button disabled={text.length===0} className=\"btn btn-primary  my-2 mx-2\" onClick={handleLcEvent}>Convert To Lowercase</button>\n                    <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={handleCopyText}>Copy Text</button>\n                     <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={removeExtraText} >Remove Extra spaces</button>\n                    <button disabled={text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={handleUpEventReset}>Reset</button>\n\n                </div>\n                <div className=\"container\">\n                    <h1>Your text summary</h1>\n                    <p>{text.split(' ').filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n                    <p>{0.008*text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes to read</p>\n                    <h2>Preview the text</h2>\n                    <p>{text.length>0?text:\"Noting to preview!\"}</p>\n                </div>\n        </div>\n    )\n}\n\nexport default TextForm\n","import React from 'react'\n\nfunction About(props) {\n\n    // const [myStyle ,setMyStyle]=useState(\n    //     {\n    //         color:'black',\n    //         backgroundColor:'white'\n    //     }\n    // )\n    // const [btnText ,setBtnText]=useState(\"Enable Dark Mode\")\n    // const handleEvent=()=>{\n    //   if(myStyle.color==='black'){\n    //     setMyStyle({\n    //         color:'white',\n    //         backgroundColor:'black'\n    //     })\n    //     setBtnText(\"Enable Light Mode\")\n    //   }\n    //   else{\n    //       setMyStyle({\n    //         color:'black',\n    //         backgroundColor:'white'\n    //       })\n    //       setBtnText(\"Enable Dark Mode\")\n    //   }\n    // }\n    let myStyle ={\n        color:props.mode==='dark'?'white':'black',\n        backgroundColor:props.mode==='dark'?'black':'white',\n        border:'1px solid',\n        borderColor:props.mode==='dark'?'white':'#616161'\n    }\n\n    return (\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\n            <h3 className=\" p-3\">About Us</h3>\n            <div class=\"accordion\" id=\"accordionExample\" style={{color:props.mode==='dark'?'white':'black'}}>\n            <div class=\"accordion-item\" style={{color:props.mode==='dark'?'white':'black'}}>\n                <h2 class=\"accordion-header\" id=\"headingOne\">\n                <button class=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                   <strong>Overview</strong>\n                </button>\n                </h2>\n                <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                <div class=\"accordion-body\" style={myStyle} >\n                    <strong>ReactTestUtils</strong> makes it easy to test React components in the testing framework of your choice. At Facebook we use Jest for painless JavaScript testing. Learn how to get started with Jest through the Jest website’s.\n                </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\" style={myStyle}>\n                <h2 class=\"accordion-header\" id=\"headingTwo\">\n                <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\n                    <strong>References</strong>\n                </button>\n                </h2>\n                <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                <div class=\"accordion-body\">\n                    <strong>To</strong>  prepare a component for assertions, wrap the code rendering it and performing updates inside an act() call. This makes your test run closer to how React works in the browser.\n                </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\" style={myStyle}>\n                <h2 class=\"accordion-header\" id=\"headingThree\">\n                <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\n                   <strong>Other Utilities</strong>\n                </button>\n                </h2>\n                <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                <div class=\"accordion-body\">\n                    <strong>Simulate</strong> an event dispatch on a DOM node with optional eventData event data.Simulate has a method for every event that React understands.\n                </div>\n             </div>\n        </div>\n        {/* <div className=\"container my-3 pb-3\">\n            <button className=\"btn btn-primary\" onClick={handleEvent}>{btnText}</button>\n        </div> */}\n    </div>\n</div>\n    )\n}\n\nexport default About\n","import React from 'react'\n\nfunction Alert(props) {\n\n    const capitalize=(word)=>{\n        const lower=word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div className=\"container my-2\">\n       <div style={{height: '50px'}}>\n             {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}{\"!\"}{\" \"}</strong>{props.alert.msg}\n            </div>}\n        </div>\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport NavBar from './components/NavBar'\nimport TextForm from './components/TextForm'\nimport About from './components/About'\nimport React, { useState } from 'react'\nimport Alert from './components/Alert'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\n\nfunction App() {\n  const [mode,setMode]=useState('white')\n  const [alert,setAlert]=useState(null)\n  const [gradinatMode,setGradinatMode]=useState('green');\n\n  const gradiantMode=()=>{\n    if(gradinatMode==='green')\n    {\n       setGradinatMode('yellow')\n       document.body.style.backgroundColor='yellow';\n       showAlert(\"Gradiant mode enabled\",\"success\")\n      \n    }\n    else{\n       setGradinatMode('green')\n       document.body.style.backgroundColor='green';\n      showAlert(\"Normal gradiant mode enabled\",\"success\")\n    }\n  }\n  \n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    },1500)\n  }\n\n  const toggleMode=()=>{\n    if(mode==='white')\n    {\n       setMode('dark')\n       document.body.style.backgroundColor='black';\n       showAlert(\"Dark mode enabled\",\"success\");\n       document.title=\"TextUtils - Dark Mode\";\n      \n    }\n    else{\n       setMode('white')\n       document.body.style.backgroundColor='white';\n      showAlert(\"Light mode enabled\",\"success\")\n      // setTimeout(() => {\n      //   document.title=\"TextUtils - Light Delay Mode\";\n      // },2000)\n      // setTimeout(() => {\n      //   document.title=\"TextUtils - Light Mode\";\n      // },4000)\n      document.title=\"TextUtils - Light Mode\";\n    }\n  }\n  \n  return (\n    <>\n    <Router>\n      <NavBar \n      mode={mode}\n      toggle={toggleMode}\n      toggleGradiant={gradiantMode}\n      />\n      <Alert alert={alert}/>\n      \n      {/* <About/> */}\n      <Switch>\n        <Route exact path=\"/\">\n          <TextForm\n            mode={mode}\n            showAlert={showAlert}\n            title=\"Try TextUtils - Word Counter, Character Counter, Remove Extra Spaces\"\n          />\n        </Route>\n        <Route exact path=\"/about\">\n          <About mode={mode}/>\n        </Route>\n      </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}